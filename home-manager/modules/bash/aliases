dotfiles_repo=~/dotfiles-nix
dotfiles_config=~/dotfiles-nix/home-manager/modules

# rcs
brc () {
cd $dotfiles_config/bash; v
}
vrc () {
cd $dotfiles_config/nvim; v
}
rrc () {
cd $dotfiles_config/ranger; v
}
krc () {
cd $dotfiles_config/kitty; v
}
dfrc () {
cd $dotfiles_repo; v
}
git-rebase-after-merge-squash () {
if [ "$FEATURE_A_BRANCH" == "" ]; then echo 'you have to define $FEATURE_A_BRANCH'; return 1; fi
if [ "$FEATURE_B_OFF_A_BRANCH" == "" ]; then echo 'you have to define $FEATURE_B_OFF_A_BRANCH'; return 1; fi
_main_branch="main"
if [ "$MAIN_BRANCH" == "" ]; then echo '$MAIN_BRANCH undefined, assuming "main"'; else _main_branch="$MAIN_BRANCH"; fi

git rebase --onto "$_main_branch" $(git merge-base "$FEATURE_B_OFF_A_BRANCH" "$FEATURE_A_BRANCH") "$FEATURE_B_OFF_A_BRANCH"
}

# vim
v () {
if [ -f ./Session.vim ] ; then
  nvim -S Session.vim $@
else
  nvim $@
fi
}

alias d=lazydocker

alias fd='fd --ignore-case --hidden --follow'
alias rg='rg --smart-case --hidden --follow'

gd () {
if [ -f ./project.godot ] ; then
  if [[ "$(top -b -n 1 | grep godot)" ]] ; then
    echo ""
  else
    $godot -e &> /dev/null &
    # kitty @ launch --type tab --cwd current --keep-focus godot --editor
    echo "press enter"; read;
  fi
  # task context godot
  # v -c 'norm \ ft'
  v --listen /tmp/godot_external_editor

  # if [ -f ./Session.vim ] ; then
  #   NVIM_LISTEN_ADDRESS=/tmp/nvimsocket nvim -S Session.vim
  # else
  #   NVIM_LISTEN_ADDRESS=/tmp/nvimsocket nvim
  # fi
else
  echo "not a godot project"
fi
}

# vim:ft=sh
